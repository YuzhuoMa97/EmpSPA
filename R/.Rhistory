labs(x="Expected(-log10P)",y="Observed(-log10P)",title = "MAF1 = 0.001, MAF2 = 0.01")  +
theme_bw() + theme(plot.title = element_text(hjust = 0.5))
p1 = p0 + scale_y_continuous(limits=c(0, 6))
#p0
ggsave(p0, filename = "binary_2pop_4EmpSPA_2CR_(0.001)(0.01)_100000_08-28-1.png",width = 5,height = 5)
#ggsave(p1, filename = "binary_2pop_4EmpSPA_2CR_(0.001)(0.4)_08-28-2.png",width = 5,height = 5)
##############################################################################
nSNP = 100000
a = 0.01
b = 0.01
c = 0.001
d = 0.001
################################   MAF
p1 = runif(nSNP, min = a, max = b)
p2 = runif(nSNP, min = c, max = d)
# p1 = rbeta(nSNP, p*(1-theta1)/theta1, (1-p)*(1-theta1)/theta1)/10
# p2 = rbeta(nSNP, p*(1-theta2)/theta2, (1-p)*(1-theta2)/theta2)/10
P = cbind(p1, p2)
#P.mtx = rbind(rep(p1, N1),rep(p2, N2),rep(p3, N3))
### i.i.d subject & i.i.d SNPS matrix
P1.mtx = matrix(0, N1, nSNP)
for (i in 1:N1) {
P1.mtx[i,]= p1
}
P2.mtx = matrix(0, N2, nSNP)
for (i in 1:N2) {
P2.mtx[i,]= p2
}
P.mtx = rbind(P1.mtx, P2.mtx) ### true MAF
###########################################
Geno.mtx1 = matrix(0, N1, nSNP)
for (i in 1:N1) {
Geno.mtx1[i,]= rbinom(nSNP, 2, p1)
}
Geno.mtx2 = matrix(0, N2, nSNP)
for (i in 1:N2) {
Geno.mtx2[i,]= rbinom(nSNP, 2, p2)
}
Geno.mtx = rbind(Geno.mtx1, Geno.mtx2)
# NOTE: The row and column names of genotype matrix are required.
rownames(Geno.mtx) = paste0("IID-",1:N)
colnames(Geno.mtx) = paste0("SNP-",1:nSNP)
##################################################################33333#
CR1 = c(0.5, 0.1, 0.01)
CR2 = c(0.4, 0.2, 0.02)
case.control = c("Balanced", "Mod.Unbalanced", "Ext.Unbalanced")
X11 = X1[c(1 : N1)]
X12 = X1[c((N1 + 1) : N)]
X21 = X2[c(1 : N1)]
X22 = X2[c((N1 + 1) : N)]
X31 = X3[c(1 : N1)]
X32 = X3[c((N1 + 1) : N)]
f = function(b, c, n, k, m1, m2, m3)
{
mu = exp(b + c * m1 + 0.5 * m2+ 0.5 * m3) / (1 + exp(b + c * m1 + 0.5 * m2+ 0.5 * m3))
y = rep(0, n)
set.seed(1)
y = rbinom(n, 1, mu)
return((sum(y) - n * k))
}
g = function(b, c, n, m1, m2, m3)
{
mu = exp(b + c * m1 + 0.5 * m2+ 0.5 * m3) / (1 + exp(b + c * m1 + 0.5 * m2+ 0.5 * m3))
y = rep(0, n)
set.seed(1)
y = rbinom(n, 1, mu)
return(y)}
b1 = uniroot(f, c(-100,100), c = 0, n = N, k = CR1[1], m1 = X11, m2 = X21, m3 = X31)
b2 = uniroot(f, c(-100,100), c = 0, n = N, k = CR1[2], m1 = X11, m2 = X21, m3 = X31)
b3 = uniroot(f, c(-100,100), c = 0, n = N, k = CR1[3], m1 = X11, m2 = X21, m3 = X31)
Y11 = g(b = b1$root, c = 0, n = N1, m1 = X11, m2 = X21, m3 = X31)
Y21 = g(b = b2$root, c = 0, n = N1, m1 = X11, m2 = X21, m3 = X31)
Y31 = g(b = b3$root, c = 0, n = N1, m1 = X11, m2 = X21, m3 = X31)
mean(Y11)
mean(Y21)
mean(Y31)
c1 = uniroot(f, c(-100,100), b = b1$root, n = N, k = CR2[1], m1 = X12, m2 = X22, m3 = X32)
c2 = uniroot(f, c(-100,100), b = b2$root, n = N, k = CR2[2], m1 = X12, m2 = X22, m3 = X32)
c3 = uniroot(f, c(-100,100), b = b3$root, n = N, k = CR2[3], m1 = X12, m2 = X22, m3 = X32)
Y12 = g(b = b1$root, c = c1$root, n = N2, m1 = X12, m2 = X22, m3 = X32)
Y22 = g(b = b2$root, c = c2$root, n = N2, m1 = X12, m2 = X22, m3 = X32)
Y32 = g(b = b3$root, c = c3$root, n = N2, m1 = X12, m2 = X22, m3 = X32)
mean(Y12)
mean(Y22)
mean(Y32)
Y1 = c(Y11, Y12)
Y2 = c(Y21, Y22)
Y3 = c(Y31, Y32)
mean(Y1)
mean(Y2)
mean(Y3)
Phen.mtx1 = data.frame(ID = paste0("IID-",1:N),
y = Y1,
Cov1 = x1,
Cov2 = X2,
Cov3 = X3)
Phen.mtx2 = data.frame(ID = paste0("IID-",1:N),
y = Y2,
Cov1 = x1,
Cov2 = X2,
Cov3 = X3)
Phen.mtx3 = data.frame(ID = paste0("IID-",1:N),
y = Y3,
Cov1 = x1,
Cov2 = X2,
Cov3 = X3)
#library(EmpSPA)
obj.null1 = EmpSPA_Null_Model("binary",
y~Cov1+Cov2+Cov3,family=binomial(link="logit"),
data=Phen.mtx1,
pIDs=Phen.mtx1$ID,
gIDs=rownames(Geno.mtx))
obj.null2 = EmpSPA_Null_Model("binary",
y~Cov1+Cov2+Cov3,family=binomial(link="logit"),
data=Phen.mtx2,
pIDs=Phen.mtx2$ID,
gIDs=rownames(Geno.mtx))
obj.null3 = EmpSPA_Null_Model("binary",
y~Cov1+Cov2+Cov3,family=binomial(link="logit"),
data=Phen.mtx3,
pIDs=Phen.mtx3$ID,
gIDs=rownames(Geno.mtx))
R1 = obj.null1$resid
R2 = obj.null2$resid
R3 = obj.null3$resid
R = cbind(R1, R2, R3)
C = t(X)%*%R
qplot(c(1:N), R1) + theme_bw() + labs(x = "Sample ID", y = "R1")
qplot(c(1:N), R2) + theme_bw() + labs(x = "Sample ID", y = "R2")
qplot(c(1:N), R3) + theme_bw() + labs(x = "Sample ID", y = "R3")
###################################################################################################3
binary.homo.res1 = EmpSPA.homo(obj.null1, Geno.mtx)
binary.homo.res2 = EmpSPA.homo(obj.null2, Geno.mtx)
binary.homo.res3 = EmpSPA.homo(obj.null3, Geno.mtx)
binary.nonhomo.res1 = EmpSPA.hete(obj.null1, Geno.mtx)
binary.nonhomo.res2 = EmpSPA.hete(obj.null2, Geno.mtx)
binary.nonhomo.res3 = EmpSPA.hete(obj.null3, Geno.mtx)
##########################################################################3
binary.homo.res1.df = as.data.frame(binary.homo.res1)
binary.homo.res1.df$Est.p.value.empspa = rank(binary.homo.res1.df$p.value.empspa)/(nrow(binary.homo.res1.df)+1)
binary.homo.res1.df$Est.p.value.empspa3 = rank(binary.homo.res1.df$p.value.empspa3)/(nrow(binary.homo.res1.df)+1)
binary.homo.res1.df$Est.p.value.empspa4 = rank(binary.homo.res1.df$p.value.empspa4)/(nrow(binary.homo.res1.df)+1)
binary.homo.res1.df$Est.p.value.empspa2 = rank(binary.homo.res1.df$p.value.empspa2)/(nrow(binary.homo.res1.df)+1)
pvalEmpSPA3Vec = binary.homo.res1.df[,c(4,13)]
pvalEmpSPA4Vec = binary.homo.res1.df[,c(5,14)]
pvalEmpSPAVec = binary.homo.res1.df[,c(3,12)]
pvalEmpSPA2Vec = binary.homo.res1.df[,c(6,15)]
colnames(pvalEmpSPA3Vec) = colnames(pvalEmpSPA4Vec) = colnames(pvalEmpSPAVec)= colnames(pvalEmpSPA2Vec) = c("pvalue","est.pvalue")
pval.homo.res1 = rbind(cbind(pvalEmpSPA3Vec, Method="EmpSPA3"),
cbind(pvalEmpSPA4Vec, Method="EmpSPA4"),
cbind(pvalEmpSPAVec, Method="EmpSPA"),
cbind(pvalEmpSPA2Vec, Method="EmpSPA2"))
pval.homo.res1 = cbind(pval.homo.res1, G = "G-mean(G)", ER= "Balanced")
pval.homo.res1 = as.data.frame(pval.homo.res1)
##########################################################################3
binary.homo.res2.df = as.data.frame(binary.homo.res2)
binary.homo.res2.df$Est.p.value.empspa = rank(binary.homo.res2.df$p.value.empspa)/(nrow(binary.homo.res2.df)+1)
binary.homo.res2.df$Est.p.value.empspa3 = rank(binary.homo.res2.df$p.value.empspa3)/(nrow(binary.homo.res2.df)+1)
binary.homo.res2.df$Est.p.value.empspa4 = rank(binary.homo.res2.df$p.value.empspa4)/(nrow(binary.homo.res2.df)+1)
binary.homo.res2.df$Est.p.value.empspa2 = rank(binary.homo.res2.df$p.value.empspa2)/(nrow(binary.homo.res2.df)+1)
pvalEmpSPA3Vec = binary.homo.res2.df[,c(4,13)]
pvalEmpSPA4Vec = binary.homo.res2.df[,c(5,14)]
pvalEmpSPAVec = binary.homo.res2.df[,c(3,12)]
pvalEmpSPA2Vec = binary.homo.res2.df[,c(6,15)]
colnames(pvalEmpSPA3Vec) = colnames(pvalEmpSPA4Vec) = colnames(pvalEmpSPAVec)= colnames(pvalEmpSPA2Vec) = c("pvalue","est.pvalue")
pval.homo.res2 = rbind(cbind(pvalEmpSPA3Vec, Method="EmpSPA3"),
cbind(pvalEmpSPA4Vec, Method="EmpSPA4"),
cbind(pvalEmpSPAVec, Method="EmpSPA"),
cbind(pvalEmpSPA2Vec, Method="EmpSPA2"))
pval.homo.res2 = cbind(pval.homo.res2, G = "G-mean(G)", ER= "Mod.Unbalanced")
pval.homo.res2 = as.data.frame(pval.homo.res2)
##########################################################################3
binary.homo.res3.df = as.data.frame(binary.homo.res3)
binary.homo.res3.df$Est.p.value.empspa = rank(binary.homo.res3.df$p.value.empspa)/(nrow(binary.homo.res3.df)+1)
binary.homo.res3.df$Est.p.value.empspa3 = rank(binary.homo.res3.df$p.value.empspa3)/(nrow(binary.homo.res3.df)+1)
binary.homo.res3.df$Est.p.value.empspa4 = rank(binary.homo.res3.df$p.value.empspa4)/(nrow(binary.homo.res3.df)+1)
binary.homo.res3.df$Est.p.value.empspa2 = rank(binary.homo.res3.df$p.value.empspa2)/(nrow(binary.homo.res3.df)+1)
pvalEmpSPA3Vec = binary.homo.res3.df[,c(4,13)]
pvalEmpSPA4Vec = binary.homo.res3.df[,c(5,14)]
pvalEmpSPAVec = binary.homo.res3.df[,c(3,12)]
pvalEmpSPA2Vec = binary.homo.res3.df[,c(6,15)]
colnames(pvalEmpSPA3Vec) = colnames(pvalEmpSPA4Vec) = colnames(pvalEmpSPAVec)= colnames(pvalEmpSPA2Vec) = c("pvalue","est.pvalue")
pval.homo.res3 = rbind(cbind(pvalEmpSPA3Vec, Method="EmpSPA3"),
cbind(pvalEmpSPA4Vec, Method="EmpSPA4"),
cbind(pvalEmpSPAVec, Method="EmpSPA"),
cbind(pvalEmpSPA2Vec, Method="EmpSPA2"))
pval.homo.res3 = cbind(pval.homo.res3, G = "G-mean(G)", ER= "Ext.Unbalanced")
pval.homo.res3 = as.data.frame(pval.homo.res3)
#######################################################################################
pval.homo.res = rbind.data.frame(pval.homo.res1, pval.homo.res2, pval.homo.res3)
######################################################################################
### non-homo
##########################################################################3
binary.nonhomo.res1.df = as.data.frame(binary.nonhomo.res1)
binary.nonhomo.res1.df$Est.p.value.empspa = rank(binary.nonhomo.res1.df$p.value.empspa)/(nrow(binary.nonhomo.res1.df)+1)
binary.nonhomo.res1.df$Est.p.value.empspa3 = rank(binary.nonhomo.res1.df$p.value.empspa3)/(nrow(binary.nonhomo.res1.df)+1)
binary.nonhomo.res1.df$Est.p.value.empspa4 = rank(binary.nonhomo.res1.df$p.value.empspa4)/(nrow(binary.nonhomo.res1.df)+1)
binary.nonhomo.res1.df$Est.p.value.empspa2 = rank(binary.nonhomo.res1.df$p.value.empspa2)/(nrow(binary.nonhomo.res1.df)+1)
pvalEmpSPA3Vec = binary.nonhomo.res1.df[,c(4,13)]
pvalEmpSPA4Vec = binary.nonhomo.res1.df[,c(5,14)]
pvalEmpSPAVec = binary.nonhomo.res1.df[,c(3,12)]
pvalEmpSPA2Vec = binary.nonhomo.res1.df[,c(6,15)]
colnames(pvalEmpSPA3Vec) = colnames(pvalEmpSPA4Vec) = colnames(pvalEmpSPAVec)= colnames(pvalEmpSPA2Vec) = c("pvalue","est.pvalue")
pval.nonhomo.res1 = rbind(cbind(pvalEmpSPA3Vec, Method="EmpSPA3"),
cbind(pvalEmpSPA4Vec, Method="EmpSPA4"),
cbind(pvalEmpSPAVec, Method="EmpSPA"),
cbind(pvalEmpSPA2Vec, Method="EmpSPA2"))
pval.nonhomo.res1 = cbind(pval.nonhomo.res1, G = "Tilde G", ER= "Balanced")
pval.nonhomo.res1 = as.data.frame(pval.nonhomo.res1)
##########################################################################3
binary.nonhomo.res2.df = as.data.frame(binary.nonhomo.res2)
binary.nonhomo.res2.df$Est.p.value.empspa = rank(binary.nonhomo.res2.df$p.value.empspa)/(nrow(binary.nonhomo.res2.df)+1)
binary.nonhomo.res2.df$Est.p.value.empspa3 = rank(binary.nonhomo.res2.df$p.value.empspa3)/(nrow(binary.nonhomo.res2.df)+1)
binary.nonhomo.res2.df$Est.p.value.empspa4 = rank(binary.nonhomo.res2.df$p.value.empspa4)/(nrow(binary.nonhomo.res2.df)+1)
binary.nonhomo.res2.df$Est.p.value.empspa2 = rank(binary.nonhomo.res2.df$p.value.empspa2)/(nrow(binary.nonhomo.res2.df)+1)
pvalEmpSPA3Vec = binary.nonhomo.res2.df[,c(4,13)]
pvalEmpSPA4Vec = binary.nonhomo.res2.df[,c(5,14)]
pvalEmpSPAVec = binary.nonhomo.res2.df[,c(3,12)]
pvalEmpSPA2Vec = binary.nonhomo.res2.df[,c(6,15)]
colnames(pvalEmpSPA3Vec) = colnames(pvalEmpSPA4Vec) = colnames(pvalEmpSPAVec)= colnames(pvalEmpSPA2Vec) = c("pvalue","est.pvalue")
pval.nonhomo.res2 = rbind(cbind(pvalEmpSPA3Vec, Method="EmpSPA3"),
cbind(pvalEmpSPA4Vec, Method="EmpSPA4"),
cbind(pvalEmpSPAVec, Method="EmpSPA"),
cbind(pvalEmpSPA2Vec, Method="EmpSPA2"))
pval.nonhomo.res2 = cbind(pval.nonhomo.res2, G = "Tilde G", ER= "Mod.Unbalanced")
pval.nonhomo.res2 = as.data.frame(pval.nonhomo.res2)
##########################################################################3
binary.nonhomo.res3.df = as.data.frame(binary.nonhomo.res3)
binary.nonhomo.res3.df$Est.p.value.empspa = rank(binary.nonhomo.res3.df$p.value.empspa)/(nrow(binary.nonhomo.res3.df)+1)
binary.nonhomo.res3.df$Est.p.value.empspa3 = rank(binary.nonhomo.res3.df$p.value.empspa3)/(nrow(binary.nonhomo.res3.df)+1)
binary.nonhomo.res3.df$Est.p.value.empspa4 = rank(binary.nonhomo.res3.df$p.value.empspa4)/(nrow(binary.nonhomo.res3.df)+1)
binary.nonhomo.res3.df$Est.p.value.empspa2 = rank(binary.nonhomo.res3.df$p.value.empspa2)/(nrow(binary.nonhomo.res3.df)+1)
pvalEmpSPA3Vec = binary.nonhomo.res3.df[,c(4,13)]
pvalEmpSPA4Vec = binary.nonhomo.res3.df[,c(5,14)]
pvalEmpSPAVec = binary.nonhomo.res3.df[,c(3,12)]
pvalEmpSPA2Vec = binary.nonhomo.res3.df[,c(6,15)]
colnames(pvalEmpSPA3Vec) = colnames(pvalEmpSPA4Vec) = colnames(pvalEmpSPAVec)= colnames(pvalEmpSPA2Vec) = c("pvalue","est.pvalue")
pval.nonhomo.res3 = rbind(cbind(pvalEmpSPA3Vec, Method="EmpSPA3"),
cbind(pvalEmpSPA4Vec, Method="EmpSPA4"),
cbind(pvalEmpSPAVec, Method="EmpSPA"),
cbind(pvalEmpSPA2Vec, Method="EmpSPA2"))
pval.nonhomo.res3 = cbind(pval.nonhomo.res3, G = "Tilde G", ER= "Ext.Unbalanced")
pval.nonhomo.res3 = as.data.frame(pval.nonhomo.res3)
#######################################################################################
pval.nonhomo.res = rbind.data.frame(pval.nonhomo.res1, pval.nonhomo.res2, pval.nonhomo.res3)
######################################################################################
pval = rbind.data.frame(pval.homo.res, pval.nonhomo.res)
library(ggplot2)
library(tidyr)
pval$ER <- factor(pval$ER,levels=c("Balanced","Mod.Unbalanced","Ext.Unbalanced"))
#pval$Method <- factor(pval$Method,levels=c("Normal1","Normal2","EmpSPA", "EmpSPA2"))
p0 = ggplot(pval, aes(-log10(est.pvalue), -log10(pvalue),color = Method)) +
geom_point() + geom_abline(slope = 1, intercept = 0) + facet_grid(ER ~ G, scales="fixed") +
labs(x="Expected(-log10P)",y="Observed(-log10P)",title = "MAF1 = 0.01, MAF2 = 0.001")  +
theme_bw() + theme(plot.title = element_text(hjust = 0.5))
p1 = p0 + scale_y_continuous(limits=c(0, 6))
#p0
ggsave(p0, filename = "binary_2pop_4EmpSPA_2CR_(0.01)(0.001)_100000_08-28-1.png",width = 5,height = 5)
#ggsave(p1, filename = "binary_2pop_4EmpSPA_2CR_(0.001)(0.4)_08-28-2.png",width = 5,height = 5)
##############################################################################
nSNP = 100000
a = 0.01
b = 0.01
c = 0.05
d = 0.05
################################   MAF
p1 = runif(nSNP, min = a, max = b)
p2 = runif(nSNP, min = c, max = d)
# p1 = rbeta(nSNP, p*(1-theta1)/theta1, (1-p)*(1-theta1)/theta1)/10
# p2 = rbeta(nSNP, p*(1-theta2)/theta2, (1-p)*(1-theta2)/theta2)/10
P = cbind(p1, p2)
#P.mtx = rbind(rep(p1, N1),rep(p2, N2),rep(p3, N3))
### i.i.d subject & i.i.d SNPS matrix
P1.mtx = matrix(0, N1, nSNP)
for (i in 1:N1) {
P1.mtx[i,]= p1
}
P2.mtx = matrix(0, N2, nSNP)
for (i in 1:N2) {
P2.mtx[i,]= p2
}
P.mtx = rbind(P1.mtx, P2.mtx) ### true MAF
###########################################
Geno.mtx1 = matrix(0, N1, nSNP)
for (i in 1:N1) {
Geno.mtx1[i,]= rbinom(nSNP, 2, p1)
}
Geno.mtx2 = matrix(0, N2, nSNP)
for (i in 1:N2) {
Geno.mtx2[i,]= rbinom(nSNP, 2, p2)
}
Geno.mtx = rbind(Geno.mtx1, Geno.mtx2)
# NOTE: The row and column names of genotype matrix are required.
rownames(Geno.mtx) = paste0("IID-",1:N)
colnames(Geno.mtx) = paste0("SNP-",1:nSNP)
##################################################################33333#
CR1 = c(0.5, 0.1, 0.01)
CR2 = c(0.4, 0.2, 0.02)
case.control = c("Balanced", "Mod.Unbalanced", "Ext.Unbalanced")
X11 = X1[c(1 : N1)]
X12 = X1[c((N1 + 1) : N)]
X21 = X2[c(1 : N1)]
X22 = X2[c((N1 + 1) : N)]
X31 = X3[c(1 : N1)]
X32 = X3[c((N1 + 1) : N)]
f = function(b, c, n, k, m1, m2, m3)
{
mu = exp(b + c * m1 + 0.5 * m2+ 0.5 * m3) / (1 + exp(b + c * m1 + 0.5 * m2+ 0.5 * m3))
y = rep(0, n)
set.seed(1)
y = rbinom(n, 1, mu)
return((sum(y) - n * k))
}
g = function(b, c, n, m1, m2, m3)
{
mu = exp(b + c * m1 + 0.5 * m2+ 0.5 * m3) / (1 + exp(b + c * m1 + 0.5 * m2+ 0.5 * m3))
y = rep(0, n)
set.seed(1)
y = rbinom(n, 1, mu)
return(y)}
b1 = uniroot(f, c(-100,100), c = 0, n = N, k = CR1[1], m1 = X11, m2 = X21, m3 = X31)
b2 = uniroot(f, c(-100,100), c = 0, n = N, k = CR1[2], m1 = X11, m2 = X21, m3 = X31)
b3 = uniroot(f, c(-100,100), c = 0, n = N, k = CR1[3], m1 = X11, m2 = X21, m3 = X31)
Y11 = g(b = b1$root, c = 0, n = N1, m1 = X11, m2 = X21, m3 = X31)
Y21 = g(b = b2$root, c = 0, n = N1, m1 = X11, m2 = X21, m3 = X31)
Y31 = g(b = b3$root, c = 0, n = N1, m1 = X11, m2 = X21, m3 = X31)
mean(Y11)
mean(Y21)
mean(Y31)
c1 = uniroot(f, c(-100,100), b = b1$root, n = N, k = CR2[1], m1 = X12, m2 = X22, m3 = X32)
c2 = uniroot(f, c(-100,100), b = b2$root, n = N, k = CR2[2], m1 = X12, m2 = X22, m3 = X32)
c3 = uniroot(f, c(-100,100), b = b3$root, n = N, k = CR2[3], m1 = X12, m2 = X22, m3 = X32)
Y12 = g(b = b1$root, c = c1$root, n = N2, m1 = X12, m2 = X22, m3 = X32)
Y22 = g(b = b2$root, c = c2$root, n = N2, m1 = X12, m2 = X22, m3 = X32)
Y32 = g(b = b3$root, c = c3$root, n = N2, m1 = X12, m2 = X22, m3 = X32)
mean(Y12)
mean(Y22)
mean(Y32)
Y1 = c(Y11, Y12)
Y2 = c(Y21, Y22)
Y3 = c(Y31, Y32)
mean(Y1)
mean(Y2)
mean(Y3)
Phen.mtx1 = data.frame(ID = paste0("IID-",1:N),
y = Y1,
Cov1 = x1,
Cov2 = X2,
Cov3 = X3)
Phen.mtx2 = data.frame(ID = paste0("IID-",1:N),
y = Y2,
Cov1 = x1,
Cov2 = X2,
Cov3 = X3)
Phen.mtx3 = data.frame(ID = paste0("IID-",1:N),
y = Y3,
Cov1 = x1,
Cov2 = X2,
Cov3 = X3)
#library(EmpSPA)
obj.null1 = EmpSPA_Null_Model("binary",
y~Cov1+Cov2+Cov3,family=binomial(link="logit"),
data=Phen.mtx1,
pIDs=Phen.mtx1$ID,
gIDs=rownames(Geno.mtx))
obj.null2 = EmpSPA_Null_Model("binary",
y~Cov1+Cov2+Cov3,family=binomial(link="logit"),
data=Phen.mtx2,
pIDs=Phen.mtx2$ID,
gIDs=rownames(Geno.mtx))
obj.null3 = EmpSPA_Null_Model("binary",
y~Cov1+Cov2+Cov3,family=binomial(link="logit"),
data=Phen.mtx3,
pIDs=Phen.mtx3$ID,
gIDs=rownames(Geno.mtx))
R1 = obj.null1$resid
R2 = obj.null2$resid
R3 = obj.null3$resid
R = cbind(R1, R2, R3)
C = t(X)%*%R
qplot(c(1:N), R1) + theme_bw() + labs(x = "Sample ID", y = "R1")
qplot(c(1:N), R2) + theme_bw() + labs(x = "Sample ID", y = "R2")
qplot(c(1:N), R3) + theme_bw() + labs(x = "Sample ID", y = "R3")
###################################################################################################3
binary.homo.res1 = EmpSPA.homo(obj.null1, Geno.mtx)
binary.homo.res2 = EmpSPA.homo(obj.null2, Geno.mtx)
binary.homo.res3 = EmpSPA.homo(obj.null3, Geno.mtx)
binary.nonhomo.res1 = EmpSPA.hete(obj.null1, Geno.mtx)
binary.nonhomo.res2 = EmpSPA.hete(obj.null2, Geno.mtx)
binary.nonhomo.res3 = EmpSPA.hete(obj.null3, Geno.mtx)
##########################################################################3
binary.homo.res1.df = as.data.frame(binary.homo.res1)
binary.homo.res1.df$Est.p.value.empspa = rank(binary.homo.res1.df$p.value.empspa)/(nrow(binary.homo.res1.df)+1)
binary.homo.res1.df$Est.p.value.empspa3 = rank(binary.homo.res1.df$p.value.empspa3)/(nrow(binary.homo.res1.df)+1)
binary.homo.res1.df$Est.p.value.empspa4 = rank(binary.homo.res1.df$p.value.empspa4)/(nrow(binary.homo.res1.df)+1)
binary.homo.res1.df$Est.p.value.empspa2 = rank(binary.homo.res1.df$p.value.empspa2)/(nrow(binary.homo.res1.df)+1)
pvalEmpSPA3Vec = binary.homo.res1.df[,c(4,13)]
pvalEmpSPA4Vec = binary.homo.res1.df[,c(5,14)]
pvalEmpSPAVec = binary.homo.res1.df[,c(3,12)]
pvalEmpSPA2Vec = binary.homo.res1.df[,c(6,15)]
colnames(pvalEmpSPA3Vec) = colnames(pvalEmpSPA4Vec) = colnames(pvalEmpSPAVec)= colnames(pvalEmpSPA2Vec) = c("pvalue","est.pvalue")
pval.homo.res1 = rbind(cbind(pvalEmpSPA3Vec, Method="EmpSPA3"),
cbind(pvalEmpSPA4Vec, Method="EmpSPA4"),
cbind(pvalEmpSPAVec, Method="EmpSPA"),
cbind(pvalEmpSPA2Vec, Method="EmpSPA2"))
pval.homo.res1 = cbind(pval.homo.res1, G = "G-mean(G)", ER= "Balanced")
pval.homo.res1 = as.data.frame(pval.homo.res1)
##########################################################################3
binary.homo.res2.df = as.data.frame(binary.homo.res2)
binary.homo.res2.df$Est.p.value.empspa = rank(binary.homo.res2.df$p.value.empspa)/(nrow(binary.homo.res2.df)+1)
binary.homo.res2.df$Est.p.value.empspa3 = rank(binary.homo.res2.df$p.value.empspa3)/(nrow(binary.homo.res2.df)+1)
binary.homo.res2.df$Est.p.value.empspa4 = rank(binary.homo.res2.df$p.value.empspa4)/(nrow(binary.homo.res2.df)+1)
binary.homo.res2.df$Est.p.value.empspa2 = rank(binary.homo.res2.df$p.value.empspa2)/(nrow(binary.homo.res2.df)+1)
pvalEmpSPA3Vec = binary.homo.res2.df[,c(4,13)]
pvalEmpSPA4Vec = binary.homo.res2.df[,c(5,14)]
pvalEmpSPAVec = binary.homo.res2.df[,c(3,12)]
pvalEmpSPA2Vec = binary.homo.res2.df[,c(6,15)]
colnames(pvalEmpSPA3Vec) = colnames(pvalEmpSPA4Vec) = colnames(pvalEmpSPAVec)= colnames(pvalEmpSPA2Vec) = c("pvalue","est.pvalue")
pval.homo.res2 = rbind(cbind(pvalEmpSPA3Vec, Method="EmpSPA3"),
cbind(pvalEmpSPA4Vec, Method="EmpSPA4"),
cbind(pvalEmpSPAVec, Method="EmpSPA"),
cbind(pvalEmpSPA2Vec, Method="EmpSPA2"))
pval.homo.res2 = cbind(pval.homo.res2, G = "G-mean(G)", ER= "Mod.Unbalanced")
pval.homo.res2 = as.data.frame(pval.homo.res2)
##########################################################################3
binary.homo.res3.df = as.data.frame(binary.homo.res3)
binary.homo.res3.df$Est.p.value.empspa = rank(binary.homo.res3.df$p.value.empspa)/(nrow(binary.homo.res3.df)+1)
binary.homo.res3.df$Est.p.value.empspa3 = rank(binary.homo.res3.df$p.value.empspa3)/(nrow(binary.homo.res3.df)+1)
binary.homo.res3.df$Est.p.value.empspa4 = rank(binary.homo.res3.df$p.value.empspa4)/(nrow(binary.homo.res3.df)+1)
binary.homo.res3.df$Est.p.value.empspa2 = rank(binary.homo.res3.df$p.value.empspa2)/(nrow(binary.homo.res3.df)+1)
pvalEmpSPA3Vec = binary.homo.res3.df[,c(4,13)]
pvalEmpSPA4Vec = binary.homo.res3.df[,c(5,14)]
pvalEmpSPAVec = binary.homo.res3.df[,c(3,12)]
pvalEmpSPA2Vec = binary.homo.res3.df[,c(6,15)]
colnames(pvalEmpSPA3Vec) = colnames(pvalEmpSPA4Vec) = colnames(pvalEmpSPAVec)= colnames(pvalEmpSPA2Vec) = c("pvalue","est.pvalue")
pval.homo.res3 = rbind(cbind(pvalEmpSPA3Vec, Method="EmpSPA3"),
cbind(pvalEmpSPA4Vec, Method="EmpSPA4"),
cbind(pvalEmpSPAVec, Method="EmpSPA"),
cbind(pvalEmpSPA2Vec, Method="EmpSPA2"))
pval.homo.res3 = cbind(pval.homo.res3, G = "G-mean(G)", ER= "Ext.Unbalanced")
pval.homo.res3 = as.data.frame(pval.homo.res3)
#######################################################################################
pval.homo.res = rbind.data.frame(pval.homo.res1, pval.homo.res2, pval.homo.res3)
######################################################################################
### non-homo
##########################################################################3
binary.nonhomo.res1.df = as.data.frame(binary.nonhomo.res1)
binary.nonhomo.res1.df$Est.p.value.empspa = rank(binary.nonhomo.res1.df$p.value.empspa)/(nrow(binary.nonhomo.res1.df)+1)
binary.nonhomo.res1.df$Est.p.value.empspa3 = rank(binary.nonhomo.res1.df$p.value.empspa3)/(nrow(binary.nonhomo.res1.df)+1)
binary.nonhomo.res1.df$Est.p.value.empspa4 = rank(binary.nonhomo.res1.df$p.value.empspa4)/(nrow(binary.nonhomo.res1.df)+1)
binary.nonhomo.res1.df$Est.p.value.empspa2 = rank(binary.nonhomo.res1.df$p.value.empspa2)/(nrow(binary.nonhomo.res1.df)+1)
pvalEmpSPA3Vec = binary.nonhomo.res1.df[,c(4,13)]
pvalEmpSPA4Vec = binary.nonhomo.res1.df[,c(5,14)]
pvalEmpSPAVec = binary.nonhomo.res1.df[,c(3,12)]
pvalEmpSPA2Vec = binary.nonhomo.res1.df[,c(6,15)]
colnames(pvalEmpSPA3Vec) = colnames(pvalEmpSPA4Vec) = colnames(pvalEmpSPAVec)= colnames(pvalEmpSPA2Vec) = c("pvalue","est.pvalue")
pval.nonhomo.res1 = rbind(cbind(pvalEmpSPA3Vec, Method="EmpSPA3"),
cbind(pvalEmpSPA4Vec, Method="EmpSPA4"),
cbind(pvalEmpSPAVec, Method="EmpSPA"),
cbind(pvalEmpSPA2Vec, Method="EmpSPA2"))
pval.nonhomo.res1 = cbind(pval.nonhomo.res1, G = "Tilde G", ER= "Balanced")
pval.nonhomo.res1 = as.data.frame(pval.nonhomo.res1)
##########################################################################3
binary.nonhomo.res2.df = as.data.frame(binary.nonhomo.res2)
binary.nonhomo.res2.df$Est.p.value.empspa = rank(binary.nonhomo.res2.df$p.value.empspa)/(nrow(binary.nonhomo.res2.df)+1)
binary.nonhomo.res2.df$Est.p.value.empspa3 = rank(binary.nonhomo.res2.df$p.value.empspa3)/(nrow(binary.nonhomo.res2.df)+1)
binary.nonhomo.res2.df$Est.p.value.empspa4 = rank(binary.nonhomo.res2.df$p.value.empspa4)/(nrow(binary.nonhomo.res2.df)+1)
binary.nonhomo.res2.df$Est.p.value.empspa2 = rank(binary.nonhomo.res2.df$p.value.empspa2)/(nrow(binary.nonhomo.res2.df)+1)
pvalEmpSPA3Vec = binary.nonhomo.res2.df[,c(4,13)]
pvalEmpSPA4Vec = binary.nonhomo.res2.df[,c(5,14)]
pvalEmpSPAVec = binary.nonhomo.res2.df[,c(3,12)]
pvalEmpSPA2Vec = binary.nonhomo.res2.df[,c(6,15)]
colnames(pvalEmpSPA3Vec) = colnames(pvalEmpSPA4Vec) = colnames(pvalEmpSPAVec)= colnames(pvalEmpSPA2Vec) = c("pvalue","est.pvalue")
pval.nonhomo.res2 = rbind(cbind(pvalEmpSPA3Vec, Method="EmpSPA3"),
cbind(pvalEmpSPA4Vec, Method="EmpSPA4"),
cbind(pvalEmpSPAVec, Method="EmpSPA"),
cbind(pvalEmpSPA2Vec, Method="EmpSPA2"))
pval.nonhomo.res2 = cbind(pval.nonhomo.res2, G = "Tilde G", ER= "Mod.Unbalanced")
pval.nonhomo.res2 = as.data.frame(pval.nonhomo.res2)
##########################################################################3
binary.nonhomo.res3.df = as.data.frame(binary.nonhomo.res3)
binary.nonhomo.res3.df$Est.p.value.empspa = rank(binary.nonhomo.res3.df$p.value.empspa)/(nrow(binary.nonhomo.res3.df)+1)
binary.nonhomo.res3.df$Est.p.value.empspa3 = rank(binary.nonhomo.res3.df$p.value.empspa3)/(nrow(binary.nonhomo.res3.df)+1)
binary.nonhomo.res3.df$Est.p.value.empspa4 = rank(binary.nonhomo.res3.df$p.value.empspa4)/(nrow(binary.nonhomo.res3.df)+1)
binary.nonhomo.res3.df$Est.p.value.empspa2 = rank(binary.nonhomo.res3.df$p.value.empspa2)/(nrow(binary.nonhomo.res3.df)+1)
pvalEmpSPA3Vec = binary.nonhomo.res3.df[,c(4,13)]
pvalEmpSPA4Vec = binary.nonhomo.res3.df[,c(5,14)]
pvalEmpSPAVec = binary.nonhomo.res3.df[,c(3,12)]
pvalEmpSPA2Vec = binary.nonhomo.res3.df[,c(6,15)]
colnames(pvalEmpSPA3Vec) = colnames(pvalEmpSPA4Vec) = colnames(pvalEmpSPAVec)= colnames(pvalEmpSPA2Vec) = c("pvalue","est.pvalue")
pval.nonhomo.res3 = rbind(cbind(pvalEmpSPA3Vec, Method="EmpSPA3"),
cbind(pvalEmpSPA4Vec, Method="EmpSPA4"),
cbind(pvalEmpSPAVec, Method="EmpSPA"),
cbind(pvalEmpSPA2Vec, Method="EmpSPA2"))
pval.nonhomo.res3 = cbind(pval.nonhomo.res3, G = "Tilde G", ER= "Ext.Unbalanced")
pval.nonhomo.res3 = as.data.frame(pval.nonhomo.res3)
#######################################################################################
pval.nonhomo.res = rbind.data.frame(pval.nonhomo.res1, pval.nonhomo.res2, pval.nonhomo.res3)
######################################################################################
pval = rbind.data.frame(pval.homo.res, pval.nonhomo.res)
library(ggplot2)
library(tidyr)
pval$ER <- factor(pval$ER,levels=c("Balanced","Mod.Unbalanced","Ext.Unbalanced"))
#pval$Method <- factor(pval$Method,levels=c("Normal1","Normal2","EmpSPA", "EmpSPA2"))
p0 = ggplot(pval, aes(-log10(est.pvalue), -log10(pvalue),color = Method)) +
geom_point() + geom_abline(slope = 1, intercept = 0) + facet_grid(ER ~ G, scales="fixed") +
labs(x="Expected(-log10P)",y="Observed(-log10P)",title = "MAF1 = 0.01, MAF2 = 0.05")  +
theme_bw() + theme(plot.title = element_text(hjust = 0.5))
p1 = p0 + scale_y_continuous(limits=c(0, 6))
#p0
ggsave(p0, filename = "binary_2pop_4EmpSPA_2CR_(0.01)(0.05)_100000_08-28-1.png",width = 5,height = 5)
#ggsave(p1, filename = "binary_2pop_4EmpSPA_2CR_(0.001)(0.4)_08-28-2.png",width = 5,height = 5)
