% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/EmpSPA.R
\name{EmpSPA.homo}
\alias{EmpSPA.homo}
\title{Empirical SaddlePoint Approximation for homozygous option (EmpSPA.homo) implementation of a case-control study (binary phenotype), surival analysis (time-to-event phenotype) or analysis of other types of phenotype for homozygous option.}
\usage{
EmpSPA.homo(
  obj.null,
  Geno.mtx,
  impute.method = "fixed",
  missing.cutoff = 0.15,
  min.maf = 1e-04,
  G.model = "Add"
)
}
\arguments{
\item{obj.null}{an R object returned from function EmpSPA_Null_Model().}

\item{Geno.mtx}{a numeric genotype matrix with each row as an individual and each column as a genetic variant.
Column names of genetic variations and row names of subject IDs are required.
Missing genotypes should be coded as NA. Both hard-called and imputed genotype data are supported.}

\item{impute.method}{a character string (default: "fixed") to specify the method to impute missing genotypes.
"fixed" imputes missing genotypes (NA) by assigning the mean genotype value (i.e. 2p where p is MAF).}

\item{missing.cutoff}{a numeric value (default: 0.15) to specify the cutoff of the missing rates.
Any variant with missing rate higher than this cutoff will be excluded from the analysis.}

\item{min.maf}{a numeric value (default: 0.0001) to specify the cutoff of the minimal MAF. Any SNP with MAF < cutoff will be excluded from the analysis.}
}
\value{
an R matrix with the following columns
\item{MAF}{Minor allele frequencies}
\item{missing.rate}{Missing rates}
\item{p.value.empspa}{p value  from a empirical saddlepoint approximation (EmpSPA.homo).}
\item{p.value.norm1}{p value from a empirical normal distribution approximation (Normal1.homo).}
\item{p.value.norm2}{p value from a empirical normal distribution approximation (Normal2.homo).}
\item{p.value.empspa2}{p value (recommanded) from a empirical saddlepoint approximation (EmpSPA2.homo).}
\item{Stat}{score statistics}
\item{Var1}{estimated variances(from Normal1.homo) of the score statistics}
\item{z1}{z values(using Var1) corresponding to the score statistics}
\item{Var2}{estimated variances(from Normal2.homo) of the score statistics}
\item{z2}{z values(using Var2) corresponding to the score statistics}
}
\description{
A fast and accurate method (homozygous option) for a genome-wide case-control study, survival analysis or analysis of other traits on a large-scale dataset.
}
\details{
To run EmpSPA.homo, the following two steps are required:
\itemize{
  \item Step 1: Use function EmpSPA_Null_Model() to fit a null logistic regression model for binary phenotype, a null Cox model for time-to-event phenotype, or input residuals from a null generalized linear model to calculate the empirical CGF
  \item Step 2: Use function EmpSPA.homo() to calculate p value for each genetic variant.
}

EmpSPA.homo calculate p values with two empirical saddlepoint approximation methods for homozygous option (EmpSPA.homo and EmpSPA2.homo) and two empirical normal distribution approximation methods for homozygous option (Normal1.homo and Normal2.homo).
Generally speaking, empirical saddlepoint approximation methods for homozygous option (EmpSPA.homo and EmpSPA2.homo) are more accurate than, but a little slower than, the empirical normal approximation for homozygous option (Normal1.homo and Normal2.homo).
When the score statistic is very close to 0 (i.e. p-values are not small), empirical saddlepoint approximation (EmpSPA.homo and EmpSPA2.homo) may be numerically unstable.
To solve this problem, we replace the wrong p values from EmpSPA.homo and EmpSPA2.homo by the p values from Normal1.homo and Normal2.homo, respectively.

To calibrate the score statistics for Cox PH model or logistic model, EmpSPA.homo uses martingale residuals which are calculated via R package survival or residuals from glm(). As for the score statistics for other types of phenotype, residuals from a null model are needed.
All extentions (such as strata, ties, left-censoring) supported by package survival could also be used in EmpSPA.homo.
Time-varying covariates are also supported by splitting each subject into several observations.

Sometimes, the order of subjects between phenotype data and genotype data are different, which could lead to some errors.
To avoid that, we ask users to specify the IDs of both phenotype data (pIDs) and genotype data (gIDs) when fitting the null model.
Users are responsible to check the consistency between pIDs and formula, and the consistency between gIDs and Geno.mtx.
}
\examples{
# example 1  time-to-event phenotype (homozygous)
# Simulation phenotype and genotype
N = 10000
nSNP = 1000
MAF = 0.1
Phen.mtx = data.frame(ID = paste0("IID-",1:N),
                      event=rbinom(N,1,0.5),
                      time=runif(N),
                      Cov1=rnorm(N),
                      Cov2=rbinom(N,1,0.5))
Geno.mtx = matrix(rbinom(N*nSNP,2,MAF),N,nSNP)

# NOTE: The row and column names of genotype matrix are required.
rownames(Geno.mtx) = paste0("IID-",1:N)
colnames(Geno.mtx) = paste0("SNP-",1:nSNP)
Geno.mtx[1:10,1]=NA   # please use NA for missing genotype

# Attach the survival package so that we can use its function Surv()
library(survival)
obj.null = EmpSPA_Null_Model("survival" ,Surv(time,event)~Cov1+Cov2, data=Phen.mtx,
                             pIDs=Phen.mtx$ID, gIDs=rownames(Geno.mtx))
survival.res = EmpSPA.homo(obj.null, Geno.mtx)

# we recommand using column of 'p.value.empspa' to associate genotype with time-to-event phenotypes
head(survival.res)

# example 2  binary phenotype (homozygous)
# Simulation phenotype and genotype
N = 10000
nSNP = 1000
MAF = 0.3
X1 = rnorm(N)
X2 = rbinom(N,1,0.5)
mu = exp(0.1+0.5*X1+0.5*X2) /(1+ exp(0.1+0.5*X1+0.5*X2))
Y= rbinom(N, 1, mu)
Phen.mtx = data.frame(ID = paste0("IID-",1:N),
                      Cov1 = X1,
                      Cov2 = X2,
                      y = Y)
Geno.mtx = matrix(rbinom(N*nSNP,2,MAF),N,nSNP)

# NOTE: The row and column names of genotype matrix are required.
rownames(Geno.mtx) = paste0("IID-",1:N)
colnames(Geno.mtx) = paste0("SNP-",1:nSNP)
Geno.mtx[1:10,1]=NA   # please use NA for missing genotype

obj.null = EmpSPA_Null_Model("binary",y~Cov1+Cov2,family=binomial(link="logit"), data=Phen.mtx,
                             pIDs=Phen.mtx$ID, gIDs=rownames(Geno.mtx))
binary.res = EmpSPA.homo(obj.null, Geno.mtx)

# we recommand using column of 'p.value.empspa' to associate genotype with binary phenotypes
head(binary.res)

# example 3 continuous phenotype (traits = "others") (homozygous)
N = 10000
nSNP = 1000
MAF = 0.1
X1 = rnorm(N)
X2 = rbinom(N,1,0.5)
mu = 0.1+0.5*X1+0.5*X2
Y = rnorm(N, mu, 1)
Phen.mtx = data.frame(ID = paste0("IID-",1:N),
                     Cov1 = X1,
                     Cov2 = X2,
                     y = Y)
obj.linear = lm(Y~Cov1+Cov2, data=Phen.mtx)
R = obj.linear$residuals
X = cbind(1, X1, X2)
C = t(X) \%*\% R
Geno.mtx = matrix(rbinom(N*nSNP,2,MAF),N,nSNP)
# NOTE: The row and column names of genotype matrix are required.
rownames(Geno.mtx) = paste0("IID-",1:N)
colnames(Geno.mtx) = paste0("SNP-",1:nSNP)
Geno.mtx[1:10,1]=NA   # please use NA for missing genotype
obj.null = EmpSPA_Null_Model ("others",resid=R, Cova.mtx=X, data=Phen.mtx, pIDs=Phen.mtx$ID, gIDs=rownames(Geno.mtx), range=c(-100,100), length.out = 10000)
linear.res = EmpSPA.homo(obj.null, Geno.mtx)
head(linear.res)
}
